version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: inventory_postgres
    environment:
      POSTGRES_DB: inventory_system
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - inventory_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: inventory_redis
    command: redis-server --appendonly yes --requirepass redis_password
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - inventory_network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend API Service
  backend:
    build:
      context: .
      dockerfile: docker/backend/Dockerfile
    container_name: inventory_backend
    environment:
      NODE_ENV: production
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: postgres
      DB_PASSWORD: password
      DB_NAME: inventory_system
      REDIS_URL: redis://:redis_password@redis:6379
      JWT_SECRET: your_super_secret_jwt_key_change_in_production
      JWT_EXPIRES_IN: 7d
      UPLOAD_PATH: /app/uploads
      MAX_FILE_SIZE: 10485760
      BACKUP_LOCAL_PATH: /app/backups
      WAREHOUSE_PATH: /app/warehouse
      BACKUP_ENCRYPTION_KEY: your_32_byte_encryption_key_here
      WAREHOUSE_ENCRYPTION_KEY: your_32_byte_warehouse_key_here
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      AWS_S3_REGION: ${AWS_S3_REGION:-us-east-1}
      AWS_S3_BACKUP_BUCKET: ${AWS_S3_BACKUP_BUCKET}
      AWS_S3_WAREHOUSE_BUCKET: ${AWS_S3_WAREHOUSE_BUCKET}
      AWS_GLACIER_VAULT: ${AWS_GLACIER_VAULT}
      ALLOWED_ORIGINS: http://localhost:3000,http://localhost:3001,http://frontend:3000
    volumes:
      - backend_uploads:/app/uploads
      - backend_backups:/app/backups
      - backend_logs:/app/logs
    ports:
      - "3001:3000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - inventory_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Warehouse Service
  warehouse:
    build:
      context: .
      dockerfile: docker/warehouse/Dockerfile
    container_name: inventory_warehouse
    environment:
      NODE_ENV: production
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: postgres
      DB_PASSWORD: password
      DB_NAME: inventory_system
      REDIS_URL: redis://:redis_password@redis:6379
      WAREHOUSE_PATH: /app/warehouse
      WAREHOUSE_ENCRYPTION_KEY: your_32_byte_warehouse_key_here
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      AWS_S3_REGION: ${AWS_S3_REGION:-us-east-1}
      AWS_S3_WAREHOUSE_BUCKET: ${AWS_S3_WAREHOUSE_BUCKET}
      AWS_GLACIER_VAULT: ${AWS_GLACIER_VAULT}
    volumes:
      - warehouse_data:/app/warehouse
      - warehouse_logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - inventory_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3002/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend Web Service
  frontend:
    build:
      context: .
      dockerfile: docker/frontend/Dockerfile
    container_name: inventory_frontend
    environment:
      REACT_APP_API_URL: http://backend:3000/api
      REACT_APP_WS_URL: ws://backend:3000
      NODE_ENV: production
    volumes:
      - frontend_build:/app/build
    ports:
      - "3000:80"
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - inventory_network
    restart: unless-stopped

  # React Native Development Server
  react-native:
    build:
      context: ./react-native-app
      dockerfile: ../docker/react-native/Dockerfile
    container_name: inventory_react_native
    environment:
      REACT_APP_API_URL: http://backend:3000/api
      REACT_APP_WS_URL: ws://backend:3000
      NODE_ENV: development
    volumes:
      - ./react-native-app:/app
      - /app/node_modules
      - react_native_cache:/app/.cache
    ports:
      - "8081:8081"
      - "19000:19000"
      - "19001:19001"
      - "19002:19002"
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - inventory_network
    restart: unless-stopped

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: inventory_nginx
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/nginx/ssl:/etc/nginx/ssl
      - nginx_logs:/var/log/nginx
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - frontend
      - backend
    networks:
      - inventory_network
    restart: unless-stopped

  # Backup Service
  backup:
    build:
      context: .
      dockerfile: docker/backup/Dockerfile
    container_name: inventory_backup
    environment:
      NODE_ENV: production
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: postgres
      DB_PASSWORD: password
      DB_NAME: inventory_system
      BACKUP_LOCAL_PATH: /app/backups
      BACKUP_ENCRYPTION_KEY: your_32_byte_encryption_key_here
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      AWS_S3_REGION: ${AWS_S3_REGION:-us-east-1}
      AWS_S3_BACKUP_BUCKET: ${AWS_S3_BACKUP_BUCKET}
      AWS_GLACIER_VAULT: ${AWS_GLACIER_VAULT}
    volumes:
      - backup_data:/app/backups
      - backend_uploads:/app/uploads:ro
      - backend_logs:/app/logs:ro
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - inventory_network
    restart: unless-stopped
    profiles:
      - backup

  # Monitoring Service
  monitoring:
    image: prom/prometheus:latest
    container_name: inventory_monitoring
    volumes:
      - ./docker/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - monitoring_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - inventory_network
    restart: unless-stopped
    profiles:
      - monitoring

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: inventory_grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./docker/monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    ports:
      - "3003:3000"
    depends_on:
      - monitoring
    networks:
      - inventory_network
    restart: unless-stopped
    profiles:
      - monitoring

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  backend_uploads:
    driver: local
  backend_backups:
    driver: local
  backend_logs:
    driver: local
  warehouse_data:
    driver: local
  warehouse_logs:
    driver: local
  frontend_build:
    driver: local
  react_native_cache:
    driver: local
  nginx_logs:
    driver: local
  backup_data:
    driver: local
  monitoring_data:
    driver: local
  grafana_data:
    driver: local

networks:
  inventory_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16 